"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[765],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7031:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],p={sidebar_position:2},i="Props",s={unversionedId:"Common/props",id:"Common/props",isDocsHomePage:!1,title:"Props",description:"Overview",source:"@site/docs/Common/props.md",sourceDirName:"Common",slug:"/Common/props",permalink:"/roact-spring/docs/Common/props",editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Common/props.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/roact-spring/docs/Getting Started"},next:{title:"Configs",permalink:"/roact-spring/docs/Common/configs"}},u=[{value:"Overview",id:"overview",children:[],level:2},{value:"Advanced Props",id:"advanced-props",children:[{value:"Loop prop",id:"loop-prop",children:[],level:3},{value:"The <code>loop</code> function",id:"the-loop-function",children:[],level:3},{value:"The <code>loop</code> table",id:"the-loop-table",children:[{value:"Inherited props",id:"inherited-props",children:[],level:4}],level:3},{value:"Reset prop",id:"reset-prop",children:[],level:3}],level:2},{value:"Default Props",id:"default-props",children:[{value:"Declarative updates",id:"declarative-updates",children:[],level:3},{value:"Imperative updates",id:"imperative-updates",children:[],level:3},{value:"Compatible props",id:"compatible-props",children:[],level:3}],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"props"},"Props"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"RoactSpring.useSpring(hooks, {\n    from = { ... }\n})\n")),(0,o.kt)("p",null,"All primitives inherit the following properties (though some of them may bring their own additionally):"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"from"),(0,o.kt)("td",{parentName:"tr",align:null},"table"),(0,o.kt)("td",{parentName:"tr",align:null},"Starting values")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"to"),(0,o.kt)("td",{parentName:"tr",align:null},"table"),(0,o.kt)("td",{parentName:"tr",align:null},"Animates to ...")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"loop"),(0,o.kt)("td",{parentName:"tr",align:null},"table/fn/bool"),(0,o.kt)("td",{parentName:"tr",align:null},"Looping settings, see ",(0,o.kt)("a",{parentName:"td",href:"props#loop-prop"},"loop prop")," for more details")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"delay"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"Delay in seconds before the animation starts")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"immediate"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"Prevents animation if true")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"configs"},"config")),(0,o.kt)("td",{parentName:"tr",align:null},"table"),(0,o.kt)("td",{parentName:"tr",align:null},"Spring config (contains mass, tension, friction, etc)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"reset"),(0,o.kt)("td",{parentName:"tr",align:null},"bool"),(0,o.kt)("td",{parentName:"tr",align:null},"The spring starts to animate from scratch (from -> to) if set true")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"default"),(0,o.kt)("td",{parentName:"tr",align:null},"bool"),(0,o.kt)("td",{parentName:"tr",align:null},"Sets default value of compatible props if true. See ",(0,o.kt)("a",{parentName:"td",href:"props#default-props"},"default props")," for more details")))),(0,o.kt)("h2",{id:"advanced-props"},"Advanced Props"),(0,o.kt)("h3",{id:"loop-prop"},"Loop prop"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"loop = true")," to repeat an animation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- Transparency repeatedly animates from 0 to 1\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    to = { transparency = 1 },\n    loop = true,\n})\n")),(0,o.kt)("h3",{id:"the-loop-function"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"loop")," function"),(0,o.kt)("p",null,"Pass a function to be called after each loop. Return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to continue looping, or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to stop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- Transparency animates from 0 to 1 three times\nlocal count = hooks.useValue(0)\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    to = { transparency = 1 },\n    loop = function()\n        count += 1\n        return 3 > count.value\n    end,\n})\n")),(0,o.kt)("h3",{id:"the-loop-table"},"The ",(0,o.kt)("inlineCode",{parentName:"h3"},"loop")," table"),(0,o.kt)("p",null,"Define a ",(0,o.kt)("inlineCode",{parentName:"p"},"loop")," table to customize the loop animation separately from the initial animation. It may contain any of the ",(0,o.kt)("inlineCode",{parentName:"p"},"useSpring")," props. For example, if delay: 1 is used, the loop animation will delay for 1 second on each loop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- Transparency repeatedly animates from 0 to 1 with 1 second delays\nlocal count = hooks.useValue(0)\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    to = { transparency = 1 },\n    loop = { delay = 1, reset = true },\n})\n")),(0,o.kt)("h4",{id:"inherited-props"},"Inherited props"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"loop")," object is always merged into a copy of the props object it was defined in. The following example shows a loop animation that inherits its config prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- The loop doesn't run more than once\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    loop = { transparency = 1 },\n})\n")),(0,o.kt)("p",null,"\u26a0\ufe0f The loop doesn't run more than once. That's because some props are never inherited. These props include default, reset, and reverse"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"To loop the animation,")," try adding ",(0,o.kt)("inlineCode",{parentName:"p"},"reset = true")," to the loop prop in the above example. Alternatively, you could add ",(0,o.kt)("inlineCode",{parentName:"p"},"from = { transparency: 1 }")," to get the same effect."),(0,o.kt)("p",null,"Lastly, try adding ",(0,o.kt)("inlineCode",{parentName:"p"},"config = { friction: 5 }")," to the loop object. This overrides the inherited config with a springy animation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- Transparency repeatedly animates from 0 to 1\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    loop = {\n        transparency = 1,\n        reset = true,\n    },\n})\n\n-- Transparency repeatedly animates from 0 to 1\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    loop = {\n        transparency = 1,\n        from = { transparency = 1 },\n    },\n})\n")),(0,o.kt)("h3",{id:"reset-prop"},"Reset prop"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"reset")," prop to start the animation from scratch. When undefined in imperative updates, the spring will assume ",(0,o.kt)("inlineCode",{parentName:"p"},"reset")," is true if ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," is passed. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local styles, api = RoactSpring.useSpring(hooks, function()\n    return { transparency = 0.5 }\nend)\n\n-- The spring will start from 0\napi.start({\n    from = { transparency = 0 },\n    to = { transparency = 1 },\n})\n\n-- The spring will ignore `from` and start from its current position\napi.start({\n    reset = false,\n    from = { transparency = 0 },\n    to = { transparency = 1 },\n})\n")),(0,o.kt)("p",null,"In declarative updates, the spring will assume reset is false if reset is not passed in."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- The spring will start from 0.2 on mount and ignore `from` on future updates\nlocal styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0.2 },\n    to = { transparency = if toggle then 0 else 1 },\n}, { toggle })\n\n-- The spring will always start from scratch from 0.2\nlocal styles = RoactSpring.useSpring(hooks, {\n    reset = true,\n    from = { transparency = 0.2 },\n    to = { transparency = if toggle then 0 else 1 },\n}, { toggle })\n")),(0,o.kt)("h2",{id:"default-props"},"Default Props"),(0,o.kt)("p",null,"The default prop lets you set the default value of certain props defined in the same update."),(0,o.kt)("h3",{id:"declarative-updates"},"Declarative updates"),(0,o.kt)("p",null,"For the declarative API, this prop is ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,o.kt)("h3",{id:"imperative-updates"},"Imperative updates"),(0,o.kt)("p",null,"Imperative updates can use ",(0,o.kt)("inlineCode",{parentName:"p"},"default: true")," to set default props."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local styles, api = RoactSpring.useSpring(hooks, function()\n    return {\n        position = UDim2.fromScale(0.5, 0.5),\n        config = { tension = 100 },\n        default = true,\n    }\nend)\n\nhooks.useEffect(function()\n    -- The `config` prop is inherited by the animation\n    -- Spring will animate with tension at 100\n    api.start({ position = UDim2.fromScale(0.3, 0.3) })\nend)\n")),(0,o.kt)("h3",{id:"compatible-props"},"Compatible props"),(0,o.kt)("p",null,"The following props can have default values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"config")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"immediate"))))}d.isMDXComponent=!0}}]);