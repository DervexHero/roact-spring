"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[646],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},862:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={sidebar_position:5},s="useSpring",p={unversionedId:"Hooks/useSpring",id:"Hooks/useSpring",isDocsHomePage:!1,title:"useSpring",description:"Overview",source:"@site/docs/Hooks/useSpring.md",sourceDirName:"Hooks",slug:"/Hooks/useSpring",permalink:"/roact-spring/docs/Hooks/useSpring",editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Hooks/useSpring.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Imperatives",permalink:"/roact-spring/docs/Common/imperatives"},next:{title:"useSprings",permalink:"/roact-spring/docs/Hooks/useSprings"}},c=[{value:"Overview",id:"overview",children:[{value:"Either: declaratively overwrite values to change the animation",id:"either-declaratively-overwrite-values-to-change-the-animation",children:[],level:3},{value:"Or: imperatively update using the api",id:"or-imperatively-update-using-the-api",children:[],level:3},{value:"Finally: apply styles to components",id:"finally-apply-styles-to-components",children:[],level:3}],level:2},{value:"Demos",id:"demos",children:[{value:"Draggable element",id:"draggable-element",children:[],level:3}],level:2}],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"usespring"},"useSpring"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Defines values into animated values."),(0,i.kt)("h3",{id:"either-declaratively-overwrite-values-to-change-the-animation"},"Either: declaratively overwrite values to change the animation"),(0,i.kt)("p",null,"If you pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," table, roact-spring will animate to ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," on mount and on every re-render. If you don't want the animation to run on mount, ensure ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," = ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," on the first render."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local styles = RoactSpring.useSpring(hooks, {\n    from = { transparency = 0 },\n    to = { transparency = if toggle then 1 else 0 },\n})\n")),(0,i.kt)("h3",{id:"or-imperatively-update-using-the-api"},"Or: imperatively update using the api"),(0,i.kt)("p",null,"If you don't pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," table, you will get an api table back. It will not automatically animate on mount and re-render, but you can call ",(0,i.kt)("inlineCode",{parentName:"p"},"api.start")," to start the animation. Handling updates like this is generally preferred as it's more powerful. Further documentation can be found in ",(0,i.kt)("a",{parentName:"p",href:"/docs/common/imperatives"},"Imperatives"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local styles, api = RoactSpring.useSpring(hooks, {\n    from = {\n        position = UDim2.fromScale(0.3, 0.3),\n        rotation = 0,\n    },\n    config = { mass = 10, tension = 100, friction = 50 }\n})\n\n-- Update spring with new props\napi.start({\n    position = UDim2.fromScale(0.5, 0.5),\n    rotation = 0,\n})\ntask.wait(1)\n-- Stop animation after 1 second\napi.stop()\n")),(0,i.kt)("h3",{id:"finally-apply-styles-to-components"},"Finally: apply styles to components"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return Roact.createElement("Frame", {\n    Position = styles.position.value,\n    Rotation = styles.rotation.value,\n    Size = UDim2.fromScale(0.3, 0.3),\n})\n')),(0,i.kt)("h2",{id:"demos"},"Demos"),(0,i.kt)("h3",{id:"draggable-element"},"Draggable element"),(0,i.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/useSpringDrag.story.lua"},(0,i.kt)("img",{src:"https://media.giphy.com/media/R2bJ57MNTdP7vmP6Ez/giphy.gif",width:"400"})))}m.isMDXComponent=!0}}]);