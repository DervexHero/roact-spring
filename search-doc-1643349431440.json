[{"title":"SpringValue","type":0,"sectionRef":"#","url":"api/SpringValue","content":"On this page SpringValue Spring values. Generally, you should use the useSpring hook instead.","keywords":""},{"title":"useSprings","type":0,"sectionRef":"#","url":"api/useSprings","content":"On this page useSprings Creates multiple springs, each with its own config. Use it for static lists, etc.","keywords":""},{"title":"useSpring","type":0,"sectionRef":"#","url":"api/useSpring","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"useSpring","url":"api/useSpring#functions","content":" "},{"title":"useSpring​","type":1,"pageTitle":"useSpring","url":"api/useSpring#useSpring","content":"&lt;/&gt; useSpring.useSpring( hooks: Hook, props: UseSpringProps ) → ( {[string]: RoactBinding}, api ) "},{"title":"Types","type":1,"pageTitle":"useSpring","url":"api/useSpring##","content":""},{"title":"​","type":1,"pageTitle":"useSpring","url":"api/useSpring#api","content":"interface api { start: () → Promise }   "},{"title":"Imperatives","type":0,"sectionRef":"#","url":"docs/imperatives","content":"Imperatives The api table in the second value returned from a spring has the following functions: local api = { -- Start your animation optionally giving new props to merge start: (props) =&gt; Promise, -- Cancel some or all animations depending on the keys passed, no keys will cancel all. stop: (keys) =&gt; void, -- Pause some or all animations depending on the keys passed, no keys will pause all. pause: (keys) =&gt; void, } Copy","keywords":""},{"title":"Configs","type":0,"sectionRef":"#","url":"docs/configs","content":"Configs Springs are configurable and can be tuned. If you want to adjust these settings, you can provide a default config table to useSpring: local styles, api = RoactSpring.useSpring(hooks, { position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy Configs can also be adjusted when animating the spring. If there isn't any config provided, the default config will be used. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy The following configs are available: Property\tDefault\tDescriptionmass\t1\tspring mass tension\t170\tspring energetic load friction\t26\tspring resistence clamp\tfalse\twhen true, stops the spring once it overshoots its boundaries precision\t0.005\thow close to the end result the animated value gets before we consider it to be &quot;there&quot; velocity\t0\tinitial velocity bounce\tnil\tWhen above zero, the spring will bounce instead of overshooting when exceeding its goal value. restVelocity\tnil\tThe smallest velocity before the animation is considered to be &quot;not moving&quot;. When undefined, precision is used instead.","keywords":""},{"title":"Props","type":0,"sectionRef":"#","url":"docs/props","content":"Props RoactSpring.useSpring(hooks, { from = { ... } }) Copy All primitives inherit the following properties (though some of them may bring their own additionally): Property\tType\tDescriptionfrom\ttable\tStarting values Configs\ttable\tSpring config (contains mass, tension, friction, etc)","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/intro","content":"Introduction roact-spring is a modern spring-physics based animation library for Roact inspired by react-spring. Instead of fixed durations, it uses physical properties like mass and tension to enable fluid and natural animations.","keywords":""},{"title":"Spring","type":0,"sectionRef":"#","url":"docs/spring","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Spring","url":"docs/spring#overview","content":"Defines values into animated values. This should only be used with class components. If you are using hooks, use useSpring instead. self.styles, self.api = RoactSpring.Spring.new({ position = UDim2.fromScale(0.3, 0.3), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy Apply styles to components. return Roact.createElement(&quot;Frame&quot;, { Position = self.styles.position.value, Rotation = self.styles.rotation.value, Size = UDim2.fromScale(0.3, 0.3), }) Copy Start animations. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }) Copy You can also specify configs for each animation. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy To run tasks after an animation has finished, chain the returned promise with andThen. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }):andThen(function() print(&quot;Animation finished!&quot;) end) Copy "},{"title":"Demos​","type":1,"pageTitle":"Spring","url":"docs/spring#demos","content":""},{"title":"Draggable element​","type":1,"pageTitle":"Spring","url":"docs/spring#draggable-element","content":" "},{"title":"useSpring","type":0,"sectionRef":"#","url":"docs/useSpring","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"useSpring","url":"docs/useSpring#overview","content":"Defines values into animated values. To get started, initialize the useSpring hook. local styles, api = RoactSpring.useSpring(hooks, { position = UDim2.fromScale(0.3, 0.3), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy Apply styles to components. return Roact.createElement(&quot;Frame&quot;, { Position = styles.position.value, Rotation = styles.rotation.value, Size = UDim2.fromScale(0.3, 0.3), }) Copy Start animations. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }) Copy You can also specify configs for each animation. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy To run tasks after an animation has finished, chain the returned promise with andThen. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }):andThen(function() print(&quot;Animation finished!&quot;) end) Copy "},{"title":"Demos​","type":1,"pageTitle":"useSpring","url":"docs/useSpring#demos","content":""},{"title":"Draggable element​","type":1,"pageTitle":"useSpring","url":"docs/useSpring#draggable-element","content":" "},{"title":"useSprings","type":0,"sectionRef":"#","url":"docs/useSprings","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"useSprings","url":"docs/useSprings#overview","content":"Creates multiple springs, each with its own config. Use it for static lists, etc. Pass in the length as well as a function that returns the props for each spring. local springs, api = RoactSpring.useSprings(hooks, 4, function(index) return { from = { Position = UDim2.fromScale(0.5, index * 0.16) }, } end) Copy Apply styles to components. local contents = {} for i = 1, 4 do contents[i] = Roact.createElement(&quot;Frame&quot;, { Position = springs[i].Position, Size = UDim2.fromScale(0.3, 0.3), }) end return contents Copy Start animations. api.start(function(index) return { Position = UDim2.fromScale(0.5 * index, 0.16) } end) Copy "},{"title":"Properties​","type":1,"pageTitle":"useSprings","url":"docs/useSprings#properties","content":"All properties documented in the common props apply. "},{"title":"Demos​","type":1,"pageTitle":"useSprings","url":"docs/useSprings#demos","content":""},{"title":"Draggable list​","type":1,"pageTitle":"useSprings","url":"docs/useSprings#draggable-list","content":" "}]