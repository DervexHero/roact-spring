[{"title":"SpringValue","type":0,"sectionRef":"#","url":"api/SpringValue","content":"On this page SpringValue Spring values. Generally, you should use the useSpring hook instead.","keywords":""},{"title":"useSpring","type":0,"sectionRef":"#","url":"api/useSpring","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"useSpring","url":"api/useSpring#functions","content":" "},{"title":"useSpring​","type":1,"pageTitle":"useSpring","url":"api/useSpring#useSpring","content":"&lt;/&gt; useSpring.useSpring( hooks: Hook, props: UseSpringProps ) → ( {[string]: RoactBinding}, api ) "},{"title":"Types","type":1,"pageTitle":"useSpring","url":"api/useSpring##","content":""},{"title":"​","type":1,"pageTitle":"useSpring","url":"api/useSpring#api","content":"interface api { start: () → Promise }   "},{"title":"useSprings","type":0,"sectionRef":"#","url":"api/useSprings","content":"On this page useSprings Creates multiple springs, each with its own config. Use it for static lists, etc.","keywords":""},{"title":"Spring","type":0,"sectionRef":"#","url":"docs/Additional Classes/spring","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Spring","url":"docs/Additional Classes/spring#overview","content":"Defines values into animated values. This should only be used with class components. If you are using hooks, use useSpring instead. self.styles, self.api = RoactSpring.Spring.new({ position = UDim2.fromScale(0.3, 0.3), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy Apply styles to components. return Roact.createElement(&quot;Frame&quot;, { Position = self.styles.position.value, Rotation = self.styles.rotation.value, Size = UDim2.fromScale(0.3, 0.3), }) Copy Start animations. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }) Copy You can also specify configs for each animation. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, { mass = 10, tension = 100, friction = 50, }) Copy To run tasks after an animation has finished, chain the returned promise with andThen. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }):andThen(function() print(&quot;Animation finished!&quot;) end) Copy "},{"title":"Demos​","type":1,"pageTitle":"Spring","url":"docs/Additional Classes/spring#demos","content":""},{"title":"Draggable element​","type":1,"pageTitle":"Spring","url":"docs/Additional Classes/spring#draggable-element","content":" "},{"title":"Configs","type":0,"sectionRef":"#","url":"docs/Common/configs","content":"","keywords":""},{"title":"Presets​","type":1,"pageTitle":"Configs","url":"docs/Common/configs#presets","content":"There are also a couple of generic presets that will cover some common ground. RoactSpring.config = { default = { mass: 1, tension: 170, friction: 26 }, gentle = { mass: 1, tension: 120, friction: 14 }, wobbly = { mass: 1, tension: 180, friction: 12 }, stiff = { mass: 1, tension: 210, friction: 20 }, slow = { mass: 1, tension: 280, friction: 60 }, molasses = { mass: 1, tension: 280, friction: 120 }, } Copy  "},{"title":"Easings​","type":1,"pageTitle":"Configs","url":"docs/Common/configs#easings","content":"While react-spring should generally be used to with springs, sometimes parameterizing animations with durations may be required (e.g., timers). The following easing functions are supported when duration is set. In\tOut\tIn OuteaseInBack\teaseOutBack\teaseInOutBack easeInBounce\teaseOutBounce\teaseInOutBounce easeInCirc\teaseOutCirc\teaseInOutCirc easeInCubic\teaseOutCubic\teaseInOutCubic easeInElastic\teaseOutElastic\teaseInOutElastic easeInExpo\teaseOutExpo\teaseInOutExpo easeInQuad\teaseOutQuad\teaseInOutQuad easeInQuart\teaseOutQuart\teaseInOutQuart easeInQuint\teaseOutQuint\teaseInOutQuint easeInSine\teaseOutSine\teaseInOutSine api.start({ to = { position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, config = { mass: 10, tension: 100, friction: 50 }, }) Copy ONLY UPDATE IMPERATIVELY Due to the way easings handle interuptions, it is recommended to only update the spring values imperatively. Setting the target value midway will cause the duration timer to reset. "},{"title":"Props","type":0,"sectionRef":"#","url":"docs/Common/props","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Props","url":"docs/Common/props#overview","content":"RoactSpring.useSpring(hooks, { from = { ... } }) Copy All primitives inherit the following properties (though some of them may bring their own additionally): Property\tType\tDescriptionfrom\ttable\tStarting values to\ttable\tAnimates to ... immediate\tboolean\tPrevents animation if true. config\ttable\tSpring config (contains mass, tension, friction, etc) "},{"title":"Default props​","type":1,"pageTitle":"Props","url":"docs/Common/props#default-props","content":""},{"title":"Imperative updates​","type":1,"pageTitle":"Props","url":"docs/Common/props#imperative-updates","content":"Imperative updates inherit default props declared from passing props to useSprings or useSpring. local styles, api = RoactSpring.useSpring(hooks, function() return { from = { Position = UDim2.fromScale(0.5, 0.5) }, config = { immediate = true }, } end) hooks.useEffect(function() -- The `config` prop is inherited by the animation -- Animation will jump immediately to the parent api.start({ Position = UDim2.fromScale(0.3, 0.3) }) end) Copy "},{"title":"Compatible props​","type":1,"pageTitle":"Props","url":"docs/Common/props#compatible-props","content":"The following props can have default values: immediate "},{"title":"Imperatives","type":0,"sectionRef":"#","url":"docs/Common/imperatives","content":"","keywords":""},{"title":"Imperative API​","type":1,"pageTitle":"Imperatives","url":"docs/Common/imperatives#imperative-api","content":"Passing a function to useSpring or useSprings will return an imperative API table. The following shows the difference between using the imperative and declarative API for toggling transparency. --[[ Using declarative API ]] local toggle, setToggle = useState(false) local styles = RoactSpring.useSpring(hooks, { from = { transparency = 1 }, to = { transparency = if toggle then 0 else 1 }, }) -- Later setToggle(function(prevState) return not prevState end) --[[ Using imperative API ]] local styles, api = RoactSpring.useSpring(hooks, function() return { from = { transparency = 1 }, } end) -- Later api.start({ transparency = if styles.transparency:getValue() == 1 then 0 else 1 }) Copy The rest of this page will use the imperative API. You can also specify configs for each animation update. api.start({ to = { position = UDim2.fromScale(0.5, 0.5), rotation = 0, }, config = { mass = 10, tension = 100, friction = 50 }, }) Copy To run tasks after an animation has finished, chain the returned promise with andThen. api.start({ position = UDim2.fromScale(0.5, 0.5), rotation = 0, }):andThen(function() print(&quot;Animation finished!&quot;) end) Copy "},{"title":"API methods​","type":1,"pageTitle":"Imperatives","url":"docs/Common/imperatives#api-methods","content":"The api table in the second value returned from a spring has the following functions: local api = { -- Start your animation optionally giving new props to merge start: (props) =&gt; Promise, -- Cancel some or all animations depending on the keys passed, no keys will cancel all. stop: (keys) =&gt; void, -- Pause some or all animations depending on the keys passed, no keys will pause all. pause: (keys) =&gt; void, } Copy note roact-spring guarantees that the api table identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency array. "},{"title":"useSpring","type":0,"sectionRef":"#","url":"docs/Hooks/useSpring","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#overview","content":"Defines values into animated values. "},{"title":"Either: declaratively overwrite values to change the animation​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#either-declaratively-overwrite-values-to-change-the-animation","content":"If you re-render the component with changed props, the animation will update. If you don't want the animation to run on mount, ensure to equals from or nil on the first render. local styles = RoactSpring.useSpring(hooks, { from = { transparency = 0 }, to = { transparency = if toggle then 1 else 0 }, }) Copy "},{"title":"Or: pass a function that returns values, and imperatively update using the api​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api","content":"You will get an API table back. It will not automatically animate on mount and re-render, but you can call api.start to start the animation. Handling updates like this is generally preferred as it's more powerful. Further documentation can be found in Imperatives. local styles, api = RoactSpring.useSpring(hooks, function() return { from = { transparency = 0 }, } }) -- Update spring with new props api.start({ transparency = if toggle 1 else 0 }) -- Stop animation api.stop() Copy "},{"title":"Finally: apply styles to components​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#finally-apply-styles-to-components","content":"return Roact.createElement(&quot;Frame&quot;, { Transparency = styles.transparency, Size = UDim2.fromScale(0.3, 0.3), }) Copy "},{"title":"Properties​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#properties","content":"All properties documented in the common props apply. "},{"title":"Additional notes​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#additional-notes","content":""},{"title":"To-prop shortcut​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#to-prop-shortcut","content":"If the only props in an update are to, then you can just pass the to table directly. -- This... api.start({ transparency = 1 }) -- is a shortcut for this... api.start({ to = { transparency = 0 } }) Copy "},{"title":"Demos​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#demos","content":""},{"title":"Draggable element​","type":1,"pageTitle":"useSpring","url":"docs/Hooks/useSpring#draggable-element","content":" "},{"title":"useSprings","type":0,"sectionRef":"#","url":"docs/Hooks/useSprings","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#overview","content":"Creates multiple springs, each with its own config. Use it for static lists, etc. "},{"title":"Either: declaratively overwrite values to change the animation​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#either-declaratively-overwrite-values-to-change-the-animation","content":"If you re-render the component with changed props, the animation will update. If you don't want the animation to run on mount, ensure to equals from or nil on the first render. local springProps = {} local length = #items for index, item in ipairs(items) do table.insert(springProps, { from = { transparency = item.transparency }, to = { transparency = if toggles[i] then 1 else 0 }, }) end local springs = RoactSpring.useSprings(hooks, length, springProps) Copy "},{"title":"Or: pass a function that returns values, and imperatively update using the api​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api","content":"You will get an API table back. It will not automatically animate on mount and re-render, but you can call api.start to start the animation. Handling updates like this is generally preferred as it's more powerful. Further documentation can be found in Imperatives. local length = #items local springs, api = RoactSpring.useSprings(hooks, length, function(index) return { from = { transparency = items[index].transparency }, } end) -- Start animations api.start(function(index) return { Position = UDim2.fromScale(0.5 * index, 0.16) } end) -- Stop all springs api.stop() Copy "},{"title":"Finally: apply styles to components​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#finally-apply-styles-to-components","content":"local contents = {} for i = 1, 4 do contents[i] = Roact.createElement(&quot;Frame&quot;, { Position = springs[i].Position, Size = UDim2.fromScale(0.3, 0.3), }) end return contents Copy "},{"title":"Properties​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#properties","content":"All properties documented in the common props apply. "},{"title":"Demos​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#demos","content":""},{"title":"Draggable list​","type":1,"pageTitle":"useSprings","url":"docs/Hooks/useSprings#draggable-list","content":" "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/intro","content":"Introduction roact-spring is a modern spring-physics based animation library for Roact inspired by react-spring. Instead of fixed durations, it uses physical properties like mass and tension to enable fluid and natural animations.","keywords":""}]